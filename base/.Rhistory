write.table(NatAge[,14:28],boot_file, row.names=FALSE,col.names = FALSE)
Recruitment<-list()
Recruitment$Recr_Model<-5
Recruitment$Recr_Prob<-rep(1,NYears)
Recruitment$alpha <-SSInput$alpha
Recruitment$beta <- SSInput$beta
Recruitment$var <- SSInput$BH_var
source(file.path(script.dir,"AGEPRO_Input.R"))
## Now write the input file:
AGPRO_INP(output.dir = "C:\\Users\\Michelle.Sculley\\Documents\\2024 WCNPO MLS Rebuilding\\Test2",
boot_file = boot_file,
SS_Out = SSInput,
ModelName="Test2",
ProjStart = 2021,
NYears = 10,
MinAge = 1,
Nsims = 100,
NRecr_models = 1,
Discards = 0,
set.seed = 123,
ScaleFactor = c(1000,1000,1000),  #population scaling factor, recruitment scaling factor, SSB scaling factor
UserSpecified = c(0,-1,0,0,0,0,0),
TimeVary = c(0,0,0,0,0,0,0),
FemaleFrac=0.5,
Recruitment=Recruitment,
Harvest=Harvest,
doRebuild=TRUE,
RebuildTargetSSB = 3000,
RebuildTargetYear = 2030,
PercentConfidence = 60,
LandingType = 1,
ThresholdReport = TRUE,
RefPointSSB = 3000,
RefPointJan1 = 0,
RefPointMidYr = 0,
RefPointF = 0.6,
SetBounds = TRUE,
MaxWeight = 250,
MaxNatM = 1,
SumReport = 1,
AuxFiles = 0,
RExport = 0,
SetScale = TRUE,
PercentileReport = TRUE,
Percentile = 50)
View(tempmodel)
tempmodel$growthseries
tempmodel$mean_body_weight
View(tempmodel)
tempmodel$biology
tempmodel$parameters$Label
source(file.path(script.dir,"SS_to_Agepro.R"))
SSInput<-SS_To_Agepro(model.dir=model.dir, script.dir=script.dir, endyr=2020, TimeStep="Year")
source(file.path(script.dir,"AGEPRO_Input.R"))
## Now write the input file:
AGPRO_INP(output.dir = "C:\\Users\\Michelle.Sculley\\Documents\\2024 WCNPO MLS Rebuilding\\Test2",
boot_file = boot_file,
SS_Out = SSInput,
ModelName="Test2",
ProjStart = 2021,
NYears = 10,
MinAge = 1,
Nsims = 100,
NRecr_models = 1,
Discards = 0,
set.seed = 123,
ScaleFactor = c(1000,1000,1000),  #population scaling factor, recruitment scaling factor, SSB scaling factor
UserSpecified = c(0,-1,0,0,0,0,0),
TimeVary = c(0,0,0,0,0,0,0),
FemaleFrac=0.5,
Recruitment=Recruitment,
Harvest=Harvest,
doRebuild=TRUE,
RebuildTargetSSB = 3000,
RebuildTargetYear = 2030,
PercentConfidence = 60,
LandingType = 1,
ThresholdReport = TRUE,
RefPointSSB = 3000,
RefPointJan1 = 0,
RefPointMidYr = 0,
RefPointF = 0.6,
SetBounds = TRUE,
MaxWeight = 250,
MaxNatM = 1,
SumReport = 1,
AuxFiles = 0,
RExport = 0,
SetScale = TRUE,
PercentileReport = TRUE,
Percentile = 50)
SSInput$Jan_WAACV
SSInput$Jan_WAA
SSInput$Jan_WAA = tempmodel$parameters[[which(tempmodel$parameters$Label=="Wtlen_1_Fem_GP_1"),"Value"]]*(SSInput$Jan_WAA^tempmodel$parameters[[which(tempmodel$parameters$Label=="Wtlen_2_Fem_GP_1"),"Value"]])
SSInput$Jan_WAA
source(file.path(script.dir,"SS_to_Agepro.R"))
SSInput<-SS_To_Agepro(model.dir=model.dir, script.dir=script.dir, endyr=2020, TimeStep="Year")
source(file.path(script.dir,"SS_to_Agepro.R"))
SSInput<-SS_To_Agepro(model.dir=model.dir, script.dir=script.dir, endyr=2020, TimeStep="Year")
source(file.path(script.dir,"AGEPRO_Input.R"))
AGPRO_INP(output.dir = "C:\\Users\\Michelle.Sculley\\Documents\\2024 WCNPO MLS Rebuilding\\Test2",
boot_file = boot_file,
SS_Out = SSInput,
ModelName="Test2",
ProjStart = 2021,
NYears = 10,
MinAge = 1,
Nsims = 100,
NRecr_models = 1,
Discards = 0,
set.seed = 123,
ScaleFactor = c(1000,1000,1000),  #population scaling factor, recruitment scaling factor, SSB scaling factor
UserSpecified = c(0,-1,0,0,0,0,0),
TimeVary = c(0,0,0,0,0,0,0),
FemaleFrac=0.5,
Recruitment=Recruitment,
Harvest=Harvest,
doRebuild=TRUE,
RebuildTargetSSB = 3000,
RebuildTargetYear = 2030,
PercentConfidence = 60,
LandingType = 1,
ThresholdReport = TRUE,
RefPointSSB = 3000,
RefPointJan1 = 0,
RefPointMidYr = 0,
RefPointF = 0.6,
SetBounds = TRUE,
MaxWeight = 250,
MaxNatM = 1,
SumReport = 1,
AuxFiles = 0,
RExport = 0,
SetScale = TRUE,
PercentileReport = TRUE,
Percentile = 50)
SSInput$alpha
SSInput$beta
bootsummary$SpawnBio
SSB_Terminal<-bootsummary$SpawnBio[which(bootsummary$SpawnBio$Yr==2020),c(-101,-102)]
SSB_Terminal
hist(SSB_Terminal)
hist(unlist(SSB_Terminal))
hist(unlist(SSB_Terminal), breaks=30)
hist(unlist(SSB_Terminal), breaks=100)
SSB_Terminal<-bootsummary$SpawnBio[which(bootsummary$SpawnBio$Yr==2020),c(-100,-101,-102)]
hist(unlist(SSB_Terminal), breaks=100)
SSInput$Fishery_SelAtAge[!duplicated(SSInput$Fishery_SelAtAge),]
SSInput$Fishery_SelAtAge[duplicated(SSInput$Fishery_SelAtAge),]
SSInput$Fishery_SelAtAge<-SSInput$Fishery_SelAtAge[!duplicated(SSInput$Fishery_SelAtAge),]
SSInput$Nfleets<-nrow(SSInput$Fishery_SelAtAge)
SSInput$Fishery_SelAtAgeCV<-SSInput$Fishery_SelAtAgeCV[c(1:Nfleets),]
SSInput$Fishery_SelAtAgeCV<-SSInput$Fishery_SelAtAgeCV[c(1:SSInput$Nfleets),]
which(SSInput$Fishery_SelAtAge[!duplicated(SSInput$Fishery_SelAtAge),])
UniqueFleets<-which(!duplicated(SSInput$Fishery_SelAtAge)& !duplicated(SSInput$Fishery_SelAtAge, fromLast=TRUE))
SSInput<-SS_To_Agepro(model.dir=model.dir, script.dir=script.dir, endyr=2020, TimeStep="Year")
TempInput<-SSInput
library(r4ss)
library(plyr)
library(dplyr)
## variables needed:
endyr = 2020
TimePeriod<-"Year"
NYears<-10
script.dir="C:\\Users\\Michelle.Sculley\\Documents\\2024 WCNPO MLS Rebuilding\\Rscripts"
boot_file = "C:\\Users\\Michelle.Sculley\\Documents\\2024 WCNPO MLS Rebuilding\\2023_WCNPOMLS.bsn"
## use the modifies SS_output function to load all the report file lines needed
model.dir<-c("C:\\Users\\Michelle.Sculley\\Documents\\2022 MLS ASSESS\\Final_BaseCase\\High R0")
source(file.path(script.dir,"SS_to_Agepro.R"))
SSInput<-SS_To_Agepro(model.dir=model.dir, script.dir=script.dir, endyr=2020, TimeStep="Year")
UniqueFleets<-which(!duplicated(SSInput$Fishery_SelAtAge)& !duplicated(SSInput$Fishery_SelAtAge, fromLast=TRUE))
UniqueFleets
!duplicated(SSInput$Fishery_SelAtAge)
!duplicated(SSInput$Fishery_SelAtAge, fromLast=TRUE)
TempInput<-SSInput
UniqueFleets<-which(!duplicated(SSInput$Fishery_SelAtAge))
UniqueFleets
names(SSInput$Fishery_SelAtAge)
## Adjust SSInput to the fleets you want to include: for this I am only choosing the fleets with unique selectivities, then for the fleets with the same selectivities, adding up the catch proportions for the new fleet:
SSInput<-TempInput
UniqueFleets<-SSInput$Fishery_SelAtAge %>%
group_by("1") %>%
filter(n() >1) %>%
distinct()
UniqueFleets
UniqueFleets<-SSInput$Fishery_SelAtAge %>%
group_by(`1`) %>%
filter(n() >1) %>%
distinct()
UniqueFleets
UniqueFleets<-which(!duplicated(SSInput$Fishery_SelAtAge))
SSInput$CatchbyFleet %>%
group_by() %>%
filter(row_number() > 1) %>%
summarise(count = n())
SSInput$CatchbyFleet
SSInput$Fishery_SelAtAge %>%
group_by() %>%
filter(row_number() > 1) %>%
summarise(count = n())
SSInput$Fishery_SelAtAge %>%
group_by(`1`) %>%
filter(row_number() > 1) %>%
summarise(count = n())
SSInput$Fishery_SelAtAge %>%
group_by(accross(everything())) %>%
filter(row_number() > 1) %>%
summarise(row_indices=list(row_number()))
SSInput$Fishery_SelAtAge %>%
group_by(across(everything())) %>%
filter(row_number() > 1) %>%
summarise(row_indices=list(row_number()))
SSInput$Fishery_SelAtAge %>%
group_by(across(everything())) %>%
filter(row_number() > 1) %>%
summarise(row_indices=list(row_number())) %>%
ungroup()
duplicate_counts <- SSInput$Fishery_SelAtAge %>%
group_by(across(everything())) %>%
filter(row_number() > 1) %>%
summarise(row_indices=list(row_number())) %>%
ungroup()
View(duplicate_counts)
library(dplyr)
# Example dataframe
my_data <- data.frame(
ID = c(1, 2, 3, 4, 2, 3, 4, 1),
Name = c("Alice", "Bob", "Charlie", "David", "Bob", "Charlie", "David", "Alice"),
Age = c(25, 30, 28, 33, 30, 28, 33, 25)
)
# Find duplicated rows and create a list of grouped row indices
grouped_rows <- my_data %>%
group_by(across(everything())) %>%
summarise(row_indices = list(list(row_number()))) %>%
ungroup() %>%
group_by(row_indices) %>%
summarise(group = list(row_number())) %>%
ungroup()
# Display the list of rows grouped together
print(grouped_rows)
View(grouped_rows)
View(grouped_rows[[1]][[1]])
i=1
SSInput$Fishery_SelAtAge[apply(SSInput$Fishery_SelAtAge,1,function(x) all.equal(x, UniqueFleets[i])),]
SSInput$Fishery_SelAtAge[apply(SSInput$Fishery_SelAtAge,1,function(x) all.equal(x, SSInput$Fishery_SelAtAge[UniqueFleets[i],])),]
# Example dataframe
my_data <- data.frame(
ID = c(1, 2, 3, 4, 2, 3, 4, 1),
Name = c("Alice", "Bob", "Charlie", "David", "Bob", "Charlie", "David", "Alice"),
Age = c(25, 30, 28, 33, 30, 28, 33, 25)
)
# Select the target row (row 1 in this case)
target_row <- my_data[1, ]
# Find rows that are duplicates of the target row
duplicated_rows <- my_data[apply(my_data, 1, function(x) all.equal(x, target_row)), ]
# Display the duplicated rows
print(duplicated_rows)
target_row
SSInput$Fishery_SelAtAge[apply(SSInput$Fishery_SelAtAge,1,function(x) all(match(x, SSInput$Fishery_SelAtAge[UniqueFleets[i],]==1)),]
SSInput$Fishery_SelAtAge[apply(SSInput$Fishery_SelAtAge,1,function(x) all(match(x, SSInput$Fishery_SelAtAge[UniqueFleets[i],]==1))),]
matching_rows <- my_data[rowSums(my_data == target_row) == ncol(my_data), ]
target_row %in% my_data
my_data
target_row
target_row==my_data[2,]
target_row=my_data[2,]
target_row %in% my_data
target_row$ID %in% my_data$ID
my_data %in% target_row
my_data$ID %in% target_row$ID
duplicated_rows=list()
for (i in 1:length(UniqueFleets)){
target_row<-SSInput$Fishery_SelAtAge[UniqueFleets[i]]
duplicated_rows[[i]]<- target_row %in% SSInput$Fishery_SelAtAge
}
for (i in 1:length(UniqueFleets)){
target_row<-SSInput$Fishery_SelAtAge[UniqueFleets[i],]
duplicated_rows[[i]]<- target_row %in% SSInput$Fishery_SelAtAge
}
View(duplicated_rows)
duplicated_rows
## Adjust SSInput to the fleets you want to include: for this I am only choosing the fleets with unique selectivities, then for the fleets with the same selectivities, adding up the catch proportions for the new fleet:
SSInput<-TempInput
duplicated_rows=list()
for (i in 1:length(UniqueFleets)){
target_row<-SSInput$Fishery_SelAtAge[UniqueFleets[i],]
duplicated_rows[[i]]<- target_row %in% SSInput$Fishery_SelAtAge
}
View(duplicated_rows)
duplicated_rows[[1]]
duplicated_rows=list()
for (i in 1:length(UniqueFleets)){
target_row<-SSInput$Fishery_SelAtAge[UniqueFleets[i],]
duplicated_rows[[i]]<- target_row$1 %in% SSInput$Fishery_SelAtAge$1
duplicated_rows=list()
for (i in 1:length(UniqueFleets)){
target_row<-SSInput$Fishery_SelAtAge[UniqueFleets[i],]
duplicated_rows[[i]]<- target_row$`1` %in% SSInput$Fishery_SelAtAge$`1`
}
View(duplicated_rows)
SSInput$Fishery_SelAtAge
SSInput$Nfleets
SSInput<-SS_To_Agepro(model.dir=model.dir, script.dir=script.dir, endyr=2020, TimeStep="Year")
SSInput$Fishery_SelAtAge
source(file.path(script.dir,"SS_to_Agepro.R"))
SSInput<-SS_To_Agepro(model.dir=model.dir, script.dir=script.dir, endyr=2020, TimeStep="Year")
SSInput$Fishery_SelAtAge
##dump SSInput into TempInput to preserve it
TempInput<-SSInput
duplicated_rows=list()
for (i in 1:length(UniqueFleets)){
target_row<-SSInput$Fishery_SelAtAge[UniqueFleets[i],]
duplicated_rows[[i]]<- target_row$`1` %in% SSInput$Fishery_SelAtAge$`1`
}
View(duplicated_rows)
target_row$`1` %in% SSInput$Fishery_SelAtAge$`1`
target_row %in% SSInput$Fishery_SelAtAge
target_row
!is.na(match(target_row$`1`, SSInput$Fishery_SelAtAge$`1`))
SSInput$Fishery_SelAtAge  %in% target_row
match(target_row$`1`, SSInput$Fishery_SelAtAge$`1`)
duplicated_rows=list()
for (i in 1:length(UniqueFleets)){
target_row<-SSInput$Fishery_SelAtAge[UniqueFleets[i],]
duplicated_rows[[i]]<-c(UniqueFleets[i],match(target_row$`1`, SSInput$Fishery_SelAtAge$`1`))
}
duplicated_rows
SSInput$Fishery_SelAtAge
target_row
match_row<-SSInput$Fishery_SelAtAge
target_row %in% match_row
target_row<-SSInput$Fishery_SelAtAge[UniqueFleets[i],1]
match_row<-SSInput$Fishery_SelAtAge[,1]
target_row %in% match_row
match_row %in% target_row
which(match_row %in% target_row == TRUE)
duplicated_rows=list()
for (i in 1:length(UniqueFleets)){
target_row<-SSInput$Fishery_SelAtAge[UniqueFleets[i],1]
match_row<-SSInput$Fishery_SelAtAge[,1]
duplicated_rows[[i]]<-which(match_row %in% target_row == TRUE)
}
duplicated_rows
my_list<-list("Group1"=c(1,2,4),"Group2"=c(3,5),"Group3"=c(6,7,9,10), "Group4"=c(8))
View(my_list)
my_data<-data.frame(A=seq(1:10,1), B=seq(1:20,2), C=seq(1:30,3))
my_data<-data.frame(A=seq(1,10,1), B=seq(1,20,2), C=seq(1,30,3))
View(my_data)
for (group_name in names(my_list)) {
group_indices <- my_list[[group_name]]
summed_rows[[group_name]] <- data.frame(Sum = rowSums(my_data[group_indices, ]))
}
summed_rows<-list()
for (group_name in names(my_list)) {
group_indices <- my_list[[group_name]]
summed_rows[[group_name]] <- data.frame(Sum = rowSums(my_data[group_indices, ]))
}
summed_rows
library(purrr)
map_dbl(duplicated_rows~sum(SSInput$CatchbyFleet[.x]))
as.vector(SSInput$CatchbyFleet)
SSInput$CatchbyFleet<-map_dbl(duplicated_rows~sum(as.vector(SSInput$CatchbyFleet)[.x]))
-map_dbl(duplicated_rows,~sum(as.vector(SSInput$CatchbyFleet)[.x]))
map_dbl(duplicated_rows,~sum(as.vector(SSInput$CatchbyFleet)[.x]))
help("map_dbl")
UniqueFleets<-which(!duplicated(SSInput$Fishery_SelAtAge))
duplicated_rows=list()
for (i in 1:length(UniqueFleets)){
target_row<-SSInput$Fishery_SelAtAge[UniqueFleets[i],1]
match_row<-SSInput$Fishery_SelAtAge[,1]
duplicated_rows[[i]]<-which(match_row %in% target_row == TRUE)
}
SSInput$Fishery_SelAtAge<-SSInput$Fishery_SelAtAge[UniqueFleets,]
SSInput$Nfleets<-nrow(SSInput$Fishery_SelAtAge)
SSInput$Fishery_SelAtAgeCV<-SSInput$Fishery_SelAtAgeCV[UniqueFleets,]
SSInput$Catage<-SSInput$Catage[UniqueFleets,]
SSInput$CatageCV<-SSInput$CatageCV[UniqueFleets,]
SSInput$CatchbyFleet<-purrr::map_dbl(duplicated_rows,~sum(as.vector(SSInput$CatchbyFleet)[.x]))
Recruitment<-list()
Recruitment$Recr_Model<-2
Recruitment$Recr_Prob <- rep(1,NYears)
Recruitment$Nobs<-20  ## I set this to the last twenty years of the assessment but it can be changed to any timeframe
firstyr<-2001 ## change these to match the year range you want
lastyr<-2020
Recruitment$Recruits<-SSInput$RecruitmentObs %>%
filter(Yr %in% firstyr:lastyr) %>%
select(SpawnBio,pred_recr)
FleetRemovals<-t(sapply(SSInput$CatchbyFleet, function(p) rep(p*TotalCatch,NYears)))
## Here is an example assuming constant catch over the number of years of the model where catch is partitianed based upon the relative catch by fleet in the last year of the assessment, this is calculated in SSInput$CatchbyFleet
TotalCatch<-3000
FleetRemovals<-t(sapply(SSInput$CatchbyFleet, function(p) rep(p*TotalCatch,NYears)))
Harvest<-list("Type"=c(rep(1,NYears)),"Harvest"=FleetRemovals)
source(file.path(script.dir,"AGEPRO_Input.R"))
source(file.path(script.dir,"AGEPRO_Input.R"))
AGEPRO_INP(output.dir = "C:\\Users\\Michelle.Sculley\\Documents\\2024 WCNPO MLS Rebuilding\\Test2",
boot_file = boot_file,
SS_Out = SSInput,
ModelName="Test2",
ProjStart = 2021,
NYears = 10,
MinAge = 1,
Nsims = 100,
NRecr_models = 1,
Discards = 0,
set.seed = 123,
ScaleFactor = c(1000,1000,1000),  #population scaling factor, recruitment scaling factor, SSB scaling factor
UserSpecified = c(0,-1,0,0,0,0,0),
TimeVary = c(0,0,0,0,0,0,0),
FemaleFrac=0.5,
Recruitment=Recruitment,
Harvest=Harvest,
doRebuild=TRUE,
RebuildTargetSSB = 3000,
RebuildTargetYear = 2030,
PercentConfidence = 60,
LandingType = 1,
ThresholdReport = TRUE,
RefPointSSB = 3000,
RefPointJan1 = 0,
RefPointMidYr = 0,
RefPointF = 0.6,
SetBounds = TRUE,
MaxWeight = 250,
MaxNatM = 1,
SumReport = 1,
AuxFiles = 0,
RExport = 0,
SetScale = TRUE,
PercentileReport = TRUE,
Percentile = 50)
library(r4ss)
library(plyr)
library(dplyr)
library(purrr)
## variables needed:
endyr = 2020
TimePeriod<-"Year"
endyr = 2020  ## last year of assessment
TimePeriod<-"Year"  # can be "Year" or "Quarter" for quarters as years
NYears<-10  ## number of years in projection
## where are your Rscripts
script.dir="C:\\Users\\Michelle.Sculley\\Documents\\2024 WCNPO MLS Rebuilding\\Rscripts"
## where is your bootstrap file path
boot_file = "C:\\Users\\Michelle.Sculley\\Documents\\2024 WCNPO MLS Rebuilding\\2023_WCNPOMLS.bsn"
## use the modifies SS_output function to load all the report file lines needed
model.dir<-c("C:\\Users\\Michelle.Sculley\\Documents\\2024 WCNPO MLS Rebuilding\\base")
source(file.path(script.dir,"SS_to_Agepro.R"))
SSInput<-SS_To_Agepro(model.dir=model.dir, script.dir=script.dir, endyr=2020, TimeStep="Year")
View(SSInput)
source(file.path(script.dir,"SS_outputforAGEPRO.R"))
base.model<-SS_outputForAGEPRO(model.dir, script.dir=script.dir,verbose=FALSE, printstats=FALSE)
aggregate(base.model$fatage,list(Fleet),sum)
names(base.model$fatage)
aggregate(base.model$fatage,list("Fleet"),sum)
aggregate(base.model$fatage,list=c("Fleet"),sum)
aggregate(base.model$fatage,by=c("Fleet"),sum)
aggregate(base.model$fatage,by=list("Fleet"),sum)
aggregate(base.model$fatage,by=list(Fleet),sum)
aggregate(base.model$fatage$`1`~base.model$fatage$Fleet+base.model$fatage$Yr,sum)
aggregate(`1`~Fleet,data=bse.model$fatage,sum)
aggregate(`1`~Fleet,data=base.model$fatage,sum)
aggregate(`1`~Fleet+Yr,data=base.model$fatage,sum)
aggregate(`1`~Yr,data=base.model$fatage,sum)
aggregate(`0`~Yr,data=base.model$fatage,sum)
min(aggregate(`0`~Yr,data=base.model$fatage,sum))
sort(aggregate(`0`~Yr,data=base.model$fatage,sum))
max(aggregate(`0`~Yr,data=base.model$fatage,sum))
max(aggregate(`0`~Yr,data=base.model$fatage,sum)[,2])
min(aggregate(`0`~Yr,data=base.model$fatage,sum)[2:46,2])
which(aggregate(`0`~Yr,data=base.model$fatage,sum)[2:46,2])>0.01)
which(aggregate(`0`~Yr,data=base.model$fatage,sum)[2:46,2]>0.01)
aggregate(`0`~Yr+Seas,data=base.model$fatage,sum)
base.model$fatage %>%  aggregate(`0`~Yr+Seas,sum) %>% filter(Seas<=2)
Age0F<-base.model$fatage %>%  aggregate(`0`~Yr+Seas,sum) %>% filter(Seas<=2 & Yr >1976)
Age0F<-base.model$fatage %>%  aggregate(`0`~Yr+Seas,sum) %>% filter(Seas<=2 & Yr >1976 & Yr <2021)
Age0F
min(Age0F)
max(Age0F)
max(Age0F[,3])
library(r4ss)
library(ss3diags)
wd1<-c("C:\\Users\\Michelle.Sculley\\Desktop\\2024 WCNPO MLS Rebuilding\\base")
setwd(wd1)
base.model<-SS_output(getwd())
wd1<-c("C:\\Users\\Michelle.Sculley\\Documents\\2024 WCNPO MLS Rebuilding\\base")
setwd(wd1)
base.model<-SS_output(getwd())
startyear = 1977
endyear = 2020
rnames <- base.model$derived_quants$Label
nyr<-20
Catch<-aggregate(base.model$catch$sel_bio,by=list(base.model$catch$Yr),sum)
names(Catch)<-c("Year","Catch")
Catch
Catch<-aggregate(base.model$catch$sel_bio,by=list(base.model$catch$Yr, base.model$catch$Seas),sum)
names(Catch)<-c("Year","Catch")
Catch<-aggregate(base.model$catch$sel_bio,by=list(base.model$catch$Yr, base.model$catch$Seas),sum)
Catch
Catch<-base.model$timeseries[,c("Yr","Seas","sel(B):_1","sel(B):_2","sel(B):_3","sel(B):_4","sel(B):_5","sel(B):_6","sel(B):_7","sel(B):_8","sel(B):_9","sel(B):_10","sel(B):_11","sel(B):_12","sel(B):_13","sel(B):_14","sel(B):_15","sel(B):_16","sel(B):_17","sel(B):_18","sel(B):_19","sel(B):_20","sel(B):_21","sel(B):_22","sel(B):_23","sel(B):_24","sel(B):_25")]
names(Catch)<-c("Yr","Season","F01_JPNLL_Q1A1_Late","F02_JPNLL_Q1A2","F03_,JPNLL_Q1A3","F04_JPNLL_Q2A1","F05_JPNLL_Q3A1_Late","F06_JPNLL_Q4A1","F07_JPNLL_Q1A4","F08_JPNLL_Q2A2","F09_JPNLL_Q3A2","F10_JPNLL_Q4A2","F11_JPNLL_Q4A3","F12_JPNLL_Others","F13_JPNDF_Q14_EarlyLate","F14_JPNDF_Q23_EarlyLate","F15_JPN_Others","F16_US_LL","F17_US_Others","F18_TWN_DWLL","F19_TWN_STLL","F20_TWN_Others","F21_WCPFC_Others","F22_JPNLL_Q1A1_Early","F23_JPNLL_Q3A1_Early","F24_JPNDF_Q14_Mid","F25_JPNDF_Q23_Mid")
#
Catch<-reshape2::melt(Catch,id.vars = c("Yr","Season"),value.name="obs")
CatchAgg<-aggregate(Catch$obs,by=list(Catch$Yr,Catch$variable),sum)
names(CatchAgg)<-c("Yr","Name","Obs")
CatchTotal<-aggregate(CatchAgg$Obs,by=list(CatchAgg$Yr),sum)
CatchAgg[which(CatchAgg[,"Name"]=="F01_JPNLL_Q1A1_Late"|CatchAgg[,"Name"]=="F02_JPNLL_Q1A2_Late"|CatchAgg[, "Name"]=="F03_,JPNLL_Q1A3"|CatchAgg[,"Name"]=="F04_JPNLL_Q2A1"|CatchAgg[,"Name"]=="F05_JPNLL_Q3A1_Late"|CatchAgg[,"Name"]=="F06_JPNLL_Q4A1"|CatchAgg[,"Name"]=="F07_JPNLL_Q1A4"|CatchAgg[,"Name"]=="F08_JPNLL_Q2A2"|CatchAgg[,"Name"]=="F09_JPNLL_Q3A2"|CatchAgg[,"Name"]=="F10_JPNLL_Q4A2"|CatchAgg[,"Name"]=="F11_JPNLL_Q4A3"|CatchAgg[,"Name"]=="F12_JPNLL_Others"|CatchAgg[,"Name"]=="F13_JPNDF_Q14_EarlyLate"|CatchAgg[,"Name"]=="F14_JPNDF_Q23_EarlyLate"|CatchAgg[,"Name"]=="F24_JPNDF_Q14_Mid"|CatchAgg[,"Name"]=="F25_JPNDF_Q23_Mid"|CatchAgg[,"Name"]=="F15_JPN_Others"|CatchAgg[,"Name"]=="F22_JPNLL_Q1A1_Early"|CatchAgg[,"Name"]=="F23_JPNLL_Q3A1_Early"),"Country"]<-"Japan"
CatchAgg[which(CatchAgg[,"Name"]=="F16_US_LL"|CatchAgg[,"Name"]=="F17_US_Others"),"Country"]<-"USA"
CatchAgg[which(CatchAgg[,"Name"]=="F18_TWN_DWLL"|CatchAgg[,"Name"]=="F19_TWN_STLL"|CatchAgg[,"Name"]=="F20_TWN_Others"),"Country"]<-"Chinese Taipei"
CatchAgg[which(CatchAgg[,"Name"]=="F21_WCPFC_Others"),"Country"]<-"WCPFC"
CatchCountry<-aggregate(CatchAgg$Obs,by=list(CatchAgg$Yr,CatchAgg$Country),sum)
names(CatchCountry)<-c("Yr","Country","Obs")
CatchCountry
